{
  "openapi": "3.0.0",
  "info": {
    "description": "Aerospike Backup Service",
    "title": "Backup Service REST API Specification",
    "contact": {

    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "v3.3.0"
  },
  "paths": {
    "/": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Root endpoint.",
        "operationId": "root",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api-docs/": {
      "get": {
        "description": "Serves the API documentation in Swagger UI format.",
        "tags": [
          "System"
        ],
        "summary": "OpenAPI specification endpoint.",
        "operationId": "api-docs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Health endpoint.",
        "operationId": "health",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Prometheus metrics endpoint.",
        "operationId": "metrics",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/ready": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Readiness endpoint.",
        "operationId": "ready",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/v1/backups/cancel/{name}": {
      "post": {
        "tags": [
          "Backup"
        ],
        "summary": "Cancel current backup.",
        "operationId": "cancelCurrentBackup",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups/currentBackup/{name}": {
      "get": {
        "tags": [
          "Backup"
        ],
        "summary": "Get current backup statistics.",
        "operationId": "getCurrentBackup",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Current backup statistics",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.RoutineState"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups/full": {
      "get": {
        "tags": [
          "Backup"
        ],
        "summary": "Get available full backups.",
        "operationId": "getFullBackups",
        "parameters": [
          {
            "description": "Lower bound timestamp filter",
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Upper bound timestamp filter",
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Full backups by routine",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dto.BackupDetails"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups/full/{name}": {
      "get": {
        "tags": [
          "Backup"
        ],
        "summary": "Get available full backups for routine.",
        "operationId": "getFullBackupsForRoutine",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Lower bound timestamp filter",
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Upper bound timestamp filter",
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Full backups for routine",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dto.BackupDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups/incremental": {
      "get": {
        "tags": [
          "Backup"
        ],
        "summary": "Get available incremental backups.",
        "operationId": "getIncrementalBackups",
        "parameters": [
          {
            "description": "Lower bound timestamp filter",
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Upper bound timestamp filter",
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Incremental backups by routine",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/dto.BackupDetails"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups/incremental/{name}": {
      "get": {
        "tags": [
          "Backup"
        ],
        "summary": "Get incremental backups for routine.",
        "operationId": "getIncrementalBackupsForRoutine",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Lower bound timestamp filter",
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Upper bound timestamp filter",
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Incremental backups for routine",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/dto.BackupDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups/schedule/{name}": {
      "post": {
        "tags": [
          "Backup"
        ],
        "summary": "Schedule a full backup once per routine name.",
        "operationId": "scheduleFullBackup",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Delay interval in milliseconds",
            "name": "delay",
            "in": "query",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Returns the configuration for the service.",
        "operationId": "readConfig",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.Config"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Updates the configuration for the service.",
        "operationId": "updateConfig",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.Config"
              }
            }
          },
          "description": "Configuration details",
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/apply": {
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reloads the configuration from the config file.",
        "operationId": "applyConfig",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/clusters": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads all Aerospike clusters from the configuration.",
        "operationId": "readAllClusters",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/dto.AerospikeCluster"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/clusters/{name}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads a specific Aerospike cluster from the configuration given its name.",
        "operationId": "readCluster",
        "parameters": [
          {
            "description": "Aerospike cluster name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.AerospikeCluster"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified cluster could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "The specified cluster could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Updates an existing Aerospike cluster in the configuration.",
        "operationId": "updateCluster",
        "parameters": [
          {
            "description": "Aerospike cluster name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.AerospikeCluster"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Adds an Aerospike cluster to the config.",
        "operationId": "addCluster",
        "parameters": [
          {
            "description": "Aerospike cluster name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.AerospikeCluster"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Deletes a cluster from the configuration by name.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "description": "Aerospike cluster name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/policies": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads all policies from the configuration.",
        "operationId": "readPolicies",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/dto.BackupPolicy"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/policies/{name}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads a backup policy from the configuration given its name.",
        "operationId": "readPolicy",
        "parameters": [
          {
            "description": "Backup policy name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.BackupPolicy"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified policy could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "The specified policy could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Updates an existing policy in the configuration.",
        "operationId": "updatePolicy",
        "parameters": [
          {
            "description": "Backup policy name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.BackupPolicy"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Adds a policy to the config.",
        "operationId": "addPolicy",
        "parameters": [
          {
            "description": "Backup policy name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.BackupPolicy"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Deletes a policy from the configuration by name.",
        "operationId": "deletePolicy",
        "parameters": [
          {
            "description": "Backup policy name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/routines": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads all routines from the configuration.",
        "operationId": "readRoutines",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/dto.BackupRoutine"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/routines/{name}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads a specific routine from the configuration given its name.",
        "operationId": "readRoutine",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.BackupRoutine"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified routine could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Updates an existing routine in the configuration.",
        "operationId": "updateRoutine",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.BackupRoutine"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Adds a backup routine to the config.",
        "operationId": "addRoutine",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.BackupRoutine"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Deletes a backup routine from the configuration by name.",
        "operationId": "deleteRoutine",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/routines/{name}/disable": {
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Disable a backup routine.",
        "operationId": "disableRoutine",
        "parameters": [
          {
            "description": "The name of the backup routine.",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Routine successfully disabled."
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error occurred.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/routines/{name}/enable": {
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Enable a backup routine.",
        "operationId": "enableRoutine",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Routine successfully enabled."
          },
          "404": {
            "description": "Not Found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/storage": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads all storage from the configuration.",
        "operationId": "readAllStorage",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/dto.Storage"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/config/storage/{name}": {
      "get": {
        "tags": [
          "Configuration"
        ],
        "summary": "Reads a specific storage from the configuration given its name.",
        "operationId": "readStorage",
        "parameters": [
          {
            "description": "Backup storage name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.Storage"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified storage could not be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Configuration"
        ],
        "summary": "Updates an existing storage in the configuration.",
        "operationId": "updateStorage",
        "parameters": [
          {
            "description": "Backup storage name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.Storage"
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Configuration"
        ],
        "summary": "Adds a storage to the config.",
        "operationId": "addStorage",
        "parameters": [
          {
            "description": "Backup storage name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.Storage"
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Configuration"
        ],
        "summary": "Deletes a storage from the configuration by name.",
        "operationId": "deleteStorage",
        "parameters": [
          {
            "description": "Backup storage name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/restore/cancel/{jobId}": {
      "post": {
        "tags": [
          "Restore"
        ],
        "summary": "Cancel a running restore operation.",
        "operationId": "cancelRestore",
        "parameters": [
          {
            "description": "Restore job ID",
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Restore job canceled successfully",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid job ID",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Job not found",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/restore/full": {
      "post": {
        "tags": [
          "Restore"
        ],
        "summary": "Trigger an asynchronous full restore operation.",
        "operationId": "restoreFull",
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.RestoreRequest"
        },
        "responses": {
          "202": {
            "description": "Restore operation job id",
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/restore/incremental": {
      "post": {
        "tags": [
          "Restore"
        ],
        "summary": "Trigger an asynchronous incremental restore operation.",
        "operationId": "restoreIncremental",
        "requestBody": {
          "$ref": "#/components/requestBodies/dto.RestoreRequest"
        },
        "responses": {
          "202": {
            "description": "Restore operation job id",
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/restore/jobs": {
      "get": {
        "tags": [
          "Restore"
        ],
        "summary": "Retrieve restore jobs.",
        "operationId": "retrieveRestoreJobs",
        "parameters": [
          {
            "description": "Lower bound timestamp filter",
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Upper bound timestamp filter",
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "description": "Comma-separated status filter (Running,Done,Failed,Cancelled). Use ! prefix for exclude filter (e.g., !Failed,Cancelled)",
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restore jobs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "$ref": "#/components/schemas/dto.RestoreJobStatus"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/restore/status/{jobId}": {
      "get": {
        "tags": [
          "Restore"
        ],
        "summary": "Retrieve status for a restore job.",
        "operationId": "restoreStatus",
        "parameters": [
          {
            "description": "Job ID to retrieve the status",
            "name": "jobId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Restore job status details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/dto.RestoreJobStatus"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/restore/timestamp": {
      "post": {
        "description": "Restores backup from the given point in time.",
        "tags": [
          "Restore"
        ],
        "summary": "Trigger an asynchronous restore operation to specific point in time.",
        "operationId": "restoreTimestamp",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/dto.RestoreTimestampRequest"
              }
            }
          },
          "description": "Restore request details",
          "required": true
        },
        "responses": {
          "202": {
            "description": "Restore operation job id",
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/v1/retrieve/configuration/{name}/{timestamp}": {
      "get": {
        "tags": [
          "Restore"
        ],
        "summary": "Retrieve Aerospike cluster configuration backup",
        "operationId": "retrieveConfiguration",
        "parameters": [
          {
            "description": "Backup routine name",
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Backup timestamp",
            "name": "timestamp",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/zip": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/version": {
      "get": {
        "tags": [
          "System"
        ],
        "summary": "Returns application version.",
        "operationId": "version",
        "responses": {
          "200": {
            "description": "version",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "externalDocs": {
    "description": "OpenAPI",
    "url": "https://swagger.io/resources/open-api/"
  },
  "servers": [
    {
      "url": "//localhost:8080"
    }
  ],
  "components": {
    "requestBodies": {
      "dto.Storage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/dto.Storage"
            }
          }
        },
        "description": "Backup storage details",
        "required": true
      },
      "dto.RestoreRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/dto.RestoreRequest"
            }
          }
        },
        "description": "Restore request details",
        "required": true
      },
      "dto.AerospikeCluster": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/dto.AerospikeCluster"
            }
          }
        },
        "description": "Aerospike cluster details",
        "required": true
      },
      "dto.BackupPolicy": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/dto.BackupPolicy"
            }
          }
        },
        "description": "Backup policy details",
        "required": true
      },
      "dto.BackupRoutine": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/dto.BackupRoutine"
            }
          }
        },
        "description": "Backup routine details",
        "required": true
      }
    },
    "schemas": {
      "dto.AerospikeCluster": {
        "description": "AerospikeCluster represents the configuration for an Aerospike cluster for backup.",
        "type": "object",
        "required": [
          "seed-nodes"
        ],
        "properties": {
          "conn-timeout": {
            "description": "The connection timeout in milliseconds.",
            "type": "integer",
            "default": 30000,
            "example": 5000
          },
          "credentials": {
            "description": "The authentication details to the Aerospike cluster.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.Credentials"
              }
            ]
          },
          "label": {
            "description": "The cluster name. Optional: used only in logs and error messages.",
            "type": "string",
            "example": "testCluster",
            "nullable": true
          },
          "max-parallel-scans": {
            "description": "Specifies the maximum number of parallel scans allowed across the cluster.\nThis property helps reduce the load on the cluster and is shared among all backups using the cluster.\nDefault: unlimited.",
            "type": "integer",
            "example": 100,
            "nullable": true
          },
          "seed-nodes": {
            "description": "The seed nodes details.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/dto.SeedNode"
            }
          },
          "tls": {
            "description": "The cluster TLS configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.TLS"
              }
            ]
          },
          "use-services-alternate": {
            "description": "Whether should use \"services-alternate\" instead of \"services\" in info request during cluster tending.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "dto.AzureStorage": {
        "description": "AzureStorage represents the configuration for Azure Blob storage.",
        "type": "object",
        "required": [
          "container-name",
          "endpoint"
        ],
        "properties": {
          "account-key": {
            "description": "AccountKey is the Azure storage account key for Shared Key authentication.\nThis is sensitive information. Can be a path in secret agent or an actual value.",
            "type": "string",
            "nullable": true
          },
          "account-name": {
            "description": "AccountName is the Azure storage account name for Shared Key authentication.",
            "type": "string",
            "nullable": true
          },
          "client-id": {
            "description": "ClientID is the Azure Active Directory client ID for AAD authentication.",
            "type": "string",
            "nullable": true
          },
          "client-secret": {
            "description": "ClientSecret is the Azure Active Directory client secret for AAD authentication.\nThis is sensitive information. Can be a path in secret agent or an actual value.",
            "type": "string",
            "nullable": true
          },
          "container-name": {
            "description": "ContainerName is the name of the Azure Blob container.",
            "type": "string"
          },
          "endpoint": {
            "description": "Endpoint is the Azure Blob service endpoint URL.",
            "type": "string"
          },
          "min-part-size": {
            "description": "The minimum size in bytes of individual Azure Blob chunks.",
            "type": "integer",
            "default": 5242880,
            "minimum": 1048576
          },
          "path": {
            "description": "Path is the root path for the backup repository within the container.\nIf not specified, backups will be saved in the container's root.",
            "type": "string",
            "example": "backups",
            "nullable": true
          },
          "secret-agent": {
            "description": "Secret Agent configuration (optional).\nMutually exclusive with 'secret-agent-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.SecretAgent"
              }
            ]
          },
          "secret-agent-name": {
            "description": "Secret Agent configuration (optional). Link to one of preconfigured agents.\nMutually exclusive with 'secret-agent'.",
            "type": "string",
            "nullable": true
          },
          "storage-class": {
            "description": "StorageClass defines the storage tier for data and metadata objects.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.AzureStorageClass"
              }
            ]
          },
          "tenant-id": {
            "description": "TenantID is the Azure Active Directory tenant ID for AAD authentication.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "dto.AzureStorageClass": {
        "description": "AzureStorageClass represents the configuration for Azure Blob Storage access tiers.",
        "type": "object",
        "properties": {
          "data": {
            "description": "DataClass specifies the storage tier for object data.",
            "type": "string",
            "enum": [
              "Hot",
              "Cool",
              "Cold",
              "Archive"
            ],
            "nullable": true
          },
          "metadata": {
            "description": "MetadataClass specifies the storage tier for metadata.",
            "type": "string",
            "enum": [
              "Hot",
              "Cool",
              "Cold"
            ],
            "nullable": true
          }
        }
      },
      "dto.BackupDetails": {
        "description": "BackupDetails contains information about a backup.",
        "type": "object",
        "properties": {
          "byte-count": {
            "description": "The size of the backup in bytes.",
            "type": "integer",
            "format": "int64",
            "example": 2000
          },
          "compression": {
            "description": "Compression specifies the compression mode used for the backup (ZSTD or NONE).",
            "type": "string"
          },
          "created": {
            "description": "The backup time in the ISO 8601 format.",
            "type": "string",
            "example": "2023-03-20T14:50:00Z"
          },
          "duration": {
            "description": "DurationSec represents the elapsed time taken by the backup process in seconds.",
            "type": "integer"
          },
          "encryption": {
            "description": "Encryption specifies the encryption mode used for the backup (NONE, AES128, AES256).",
            "type": "string"
          },
          "file-count": {
            "description": "The number of backup files created.",
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "finished": {
            "description": "The time the backup operation completed.",
            "type": "string",
            "example": "2023-03-20T14:50:00Z"
          },
          "from": {
            "description": "The lower time bound of backup entities in the ISO 8601 format (for incremental backups only).",
            "type": "string",
            "example": "2023-03-19T14:50:00Z"
          },
          "key": {
            "description": "Key is the path to the backup files within the configured storage location.\nThis value can be used as `backup-data-path` in dto.RestoreRequest.",
            "type": "string",
            "example": "daily/backup/1707915600000/source-ns1"
          },
          "namespace": {
            "description": "The namespace of a backup.",
            "type": "string",
            "example": "testNamespace"
          },
          "record-count": {
            "description": "The total number of records backed up.",
            "type": "integer",
            "format": "int64",
            "example": 100
          },
          "secondary-index-count": {
            "description": "The number of secondary indexes backed up.",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "storage": {
            "description": "Storage specifies the details of the storage location where the backup is stored.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.Storage"
              }
            ]
          },
          "timestamp": {
            "description": "The backup time in epoch millis.",
            "type": "integer",
            "format": "int64",
            "example": 1685458200000
          },
          "udf-count": {
            "description": "The number of UDF files backed up.",
            "type": "integer",
            "format": "int64",
            "example": 2
          }
        }
      },
      "dto.BackupPolicy": {
        "description": "BackupPolicy represents a scheduled backup policy.",
        "type": "object",
        "properties": {
          "bandwidth": {
            "description": "Throttles backup write speed to a maximum of the specified bandwidth in MiB/s.\nDefault is no limit.",
            "type": "integer",
            "example": 10000,
            "nullable": true
          },
          "compression": {
            "description": "Compression details (algorithm and mode). Default is no compression.\nEnabling compression reduces storage and network usage, but increases CPU usage during the backup.\nDepending on the system configuration, compression may improve or degrade overall performance.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.CompressionPolicy"
              }
            ]
          },
          "concurrent-incremental": {
            "description": "Allows incremental backups to run concurrently.\nWhen false (default), incremental backups are skipped if another backup for same routine is in progress.",
            "type": "boolean",
            "default": false
          },
          "encryption": {
            "description": "Encryption details (algorithm and key). Default is no encryption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.EncryptionPolicy"
              }
            ]
          },
          "file-limit": {
            "description": "File size limit (in MB) for the backup directory. If an .asb backup file crosses this size threshold,\na new backup file will be created.",
            "type": "integer",
            "default": 250
          },
          "no-indexes": {
            "description": "Do not back up any secondary index definitions.",
            "type": "boolean",
            "default": false
          },
          "no-records": {
            "description": "Do not back up any record data (metadata or bin data).",
            "type": "boolean",
            "default": false
          },
          "no-udfs": {
            "description": "Do not back up any UDF modules.",
            "type": "boolean",
            "default": false
          },
          "parallel": {
            "description": "Maximum number of scan calls to run in parallel. Each scan call processes a subset of the total\ndata partitions. The optimal value depends on hardware and network configuration.",
            "type": "integer",
            "default": 8,
            "minimum": 1,
            "example": 1
          },
          "parallel-write": {
            "description": "Maximum number of threads to use for writing backup files. If not specified, same values as `parallel` is used.",
            "type": "integer",
            "default": 8,
            "minimum": 1,
            "example": 1
          },
          "records-per-second": {
            "description": "Limits the number of records returned per second (RPS).\nDefault is no limit.",
            "type": "integer",
            "example": 1000,
            "nullable": true
          },
          "retention": {
            "description": "Specifies how long to retain full and incremental backups.\nCleanup runs asynchronously after each successful full backup, never deleting backups preemptively.\nEnsure storage capacity for at least one extra full backup beyond the retention configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RetentionPolicy"
              }
            ]
          },
          "retry-policy": {
            "description": "RetryPolicy defines the configuration for database scan retry attempts in case of failures.\nIf nil, the default policy is used (5 retries with a one-minute delay between attempts).",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RetryPolicy"
              }
            ]
          },
          "sealed": {
            "description": "Sealed determines whether backup should include keys updated during the backup process.\nWhen true, the backup contains only records that last modified before backup started.\nWhen false (default), records updated during backup might be included in the backup, but it's not guaranteed.\nThis parameter does not affect XDR backups (which always includes all keys).",
            "type": "boolean",
            "default": false
          },
          "socket-timeout": {
            "description": "Socket timeout in milliseconds. Default is 10 minutes. If this value is 0, it is set to total-timeout.\nIf both are 0, there is no socket idle time limit.",
            "type": "integer",
            "default": 60000
          },
          "total-timeout": {
            "description": "Total socket timeout in milliseconds. Default is 0, that is, no timeout.",
            "type": "integer",
            "default": 0
          },
          "with-cluster-configuration": {
            "description": "Back up Aerospike cluster configuration.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "dto.BackupRoutine": {
        "description": "BackupRoutine represents a scheduled backup operation routine.",
        "type": "object",
        "required": [
          "interval-cron",
          "namespaces",
          "source-cluster",
          "storage"
        ],
        "properties": {
          "backup-policy": {
            "description": "The name of the corresponding backup policy, one of defined in `config.backup-policies` (optional).",
            "type": "string",
            "nullable": true
          },
          "bin-list": {
            "description": "The list of backup bin names (optional, an empty list implies backing up all bins) extensions:\"x-nullable\".",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "dataBin"
            ],
            "nullable": true
          },
          "disabled": {
            "description": "Whether this routine is disabled and should not run. Default: false.",
            "type": "boolean",
            "default": false
          },
          "incr-interval-cron": {
            "description": "The interval for incremental backup as a cron expression string (optional).",
            "type": "string",
            "example": "*/10 * * * * *",
            "nullable": true
          },
          "interval-cron": {
            "description": "The interval for full backup as a cron expression string.\nCron expression format: https://github.com/reugn/go-quartz?tab=readme-ov-file#cron-expression-format",
            "type": "string",
            "example": "0 0 * * * *"
          },
          "namespaces": {
            "description": "The list of the namespaces to back up (empty list implies backup of the whole cluster).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "[\"source-ns1\"]"
            ]
          },
          "node-list": {
            "description": "NodeList specifies which Aerospike nodes to include in the backup.\nOnly the listed nodes will be backed up.\nEach node can be specified as one of the following:\n- \"\u003CIP address\u003E:\u003Cport\u003E\"\n- \"\u003Chostname\u003E:\u003Cport\u003E\"\n- \"\u003Cnode ID\u003E\"\nTo obtain node identifiers, run: `asinfo -v \"service:\"`.\nIf using IP addresses or hostnames, ensure they match the values returned by the `asinfo` command.\nThis field is mutually exclusive with partition-list.\nParallelism is determined by the number of listed nodes unless `BackupPolicy.Parallel` is set to a lower value.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "partition-list": {
            "description": "PartitionList defines the list of partitions to include in the backup.\nThe format supports individual partitions or ranges.\n- A range is specified as \"\u003Cstart\u003E-\u003Ccount\u003E\" (e.g., \"100-50\" backs up 50 partitions starting from 100).\n- A single partition is specified as a number (e.g., \"0\").\nMultiple entries can be comma-separated: e.g., \"0,100,200,300,400,500\".\nBy default, all partitions (0 to 4095) are backed up.\nThis field is mutually exclusive with node-list.",
            "type": "string",
            "nullable": true
          },
          "prefer-racks": {
            "description": "The list of Aerospike Server rack IDs to prioritize when reading records during backup.\nThis is optional and can be used to optimize for rack-aware deployments.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [0],
            "nullable": true
          },
          "secret-agent": {
            "description": "The name of a Secret Agent to read secrets from (optional).",
            "type": "string",
            "nullable": true
          },
          "set-list": {
            "description": "The list of backup set names (optional, an empty list implies backing up all sets).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "set1"
            ],
            "nullable": true
          },
          "source-cluster": {
            "description": "The name of the corresponding source cluster.",
            "type": "string",
            "example": "testCluster"
          },
          "storage": {
            "description": "The name of the corresponding storage provider configuration.",
            "type": "string"
          }
        }
      },
      "dto.BackupServiceConfig": {
        "description": "BackupServiceConfig represents the backup service configuration properties.",
        "type": "object",
        "properties": {
          "http": {
            "description": "HTTPServer is the backup service HTTP server configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.HTTPServerConfig"
              }
            ]
          },
          "logger": {
            "description": "Logger is the backup service logger configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.LoggerConfig"
              }
            ]
          }
        }
      },
      "dto.CompressionPolicy": {
        "description": "CompressionPolicy contains backup compression information.",
        "type": "object",
        "properties": {
          "level": {
            "description": "The compression level to use.\nAlgorithm-specific; for zstd: from -1 (fastest) to 22 (best compression).",
            "type": "integer",
            "default": 0,
            "maximum": 22,
            "minimum": -1
          },
          "mode": {
            "description": "The compression mode to be used (default is NONE).",
            "type": "string",
            "default": "NONE",
            "enum": [
              "NONE",
              "ZSTD"
            ]
          }
        }
      },
      "dto.Config": {
        "description": "Config represents the service configuration file.",
        "type": "object",
        "properties": {
          "aerospike-clusters": {
            "description": "AerospikeClusters is a map of Aerospike clusters that can be used by backup routines.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/dto.AerospikeCluster"
            }
          },
          "backup-policies": {
            "description": "BackupPolicies is a map of backup policies that can be used by backup routines.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/dto.BackupPolicy"
            }
          },
          "backup-routines": {
            "description": "BackupRoutines is a map of backup routines.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/dto.BackupRoutine"
            }
          },
          "secret-agents": {
            "description": "SecretAgents is a map of secret agents used by backup routines (for encryption keys), clusters (for credentials), and storage (for authentication).",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/dto.SecretAgent"
            }
          },
          "service": {
            "description": "ServiceConfig contains general service settings.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.BackupServiceConfig"
              }
            ]
          },
          "storage": {
            "description": "Storage is a map of storages that can be used by backup routines.",
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/dto.Storage"
            }
          }
        }
      },
      "dto.Credentials": {
        "description": "Credentials represents authentication details to the Aerospike cluster.",
        "type": "object",
        "properties": {
          "auth-mode": {
            "description": "The authentication mode string (INTERNAL, EXTERNAL, PKI).",
            "type": "string",
            "default": "INTERNAL",
            "enum": [
              "INTERNAL",
              "EXTERNAL",
              "PKI"
            ]
          },
          "password": {
            "description": "The password for the cluster authentication.\nIt can be either plain text or path into the secret agent.",
            "type": "string",
            "example": "testPswd",
            "nullable": true
          },
          "password-path": {
            "description": "The file path with the password string.",
            "type": "string",
            "example": "/path/to/pass.txt",
            "nullable": true
          },
          "secret-agent": {
            "description": "Secret Agent configuration (optional).\nMutually exclusive with 'secret-agent-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.SecretAgent"
              }
            ]
          },
          "secret-agent-name": {
            "description": "Secret Agent configuration (optional). Link to one of preconfigured agents.\nMutually exclusive with 'secret-agent'.",
            "type": "string",
            "nullable": true
          },
          "user": {
            "description": "The username for the cluster authentication.",
            "type": "string",
            "example": "testUser",
            "nullable": true
          }
        }
      },
      "dto.EncryptionPolicy": {
        "description": "EncryptionPolicy contains backup encryption information.",
        "type": "object",
        "properties": {
          "key-env": {
            "description": "The name of the environment variable containing the encryption key.",
            "type": "string",
            "nullable": true
          },
          "key-file": {
            "description": "The path to the file containing the encryption key.",
            "type": "string",
            "nullable": true
          },
          "key-secret": {
            "description": "The secret keyword in Aerospike Secret Agent containing the encryption key.",
            "type": "string",
            "nullable": true
          },
          "mode": {
            "description": "The encryption mode to be used (NONE, AES128, AES256)",
            "type": "string",
            "default": "NONE",
            "enum": [
              "NONE",
              "AES128",
              "AES256"
            ]
          }
        }
      },
      "dto.FileLoggerConfig": {
        "description": "FileLoggerConfig represents the configuration for the file logger writer.",
        "type": "object",
        "required": [
          "filename"
        ],
        "properties": {
          "compress": {
            "description": "Compress determines if the rotated log files should be compressed\nusing gzip. The default is not to perform compression.",
            "type": "boolean",
            "default": false
          },
          "filename": {
            "description": "Filename is the file to write logs to.",
            "type": "string",
            "example": "log.txt"
          },
          "maxage": {
            "description": "MaxAge is the maximum number of days to retain old log files based on the\ntimestamp encoded in their filename. The default is not to remove old log files\nbased on age.",
            "type": "integer",
            "nullable": true
          },
          "maxbackups": {
            "description": "MaxBackups is the maximum number of old log files to retain. The default\nis to retain all old log files.",
            "type": "integer",
            "nullable": true
          },
          "maxsize": {
            "description": "MaxSize is the maximum size in megabytes of the log file before it gets rotated.",
            "type": "integer",
            "example": 100,
            "nullable": true
          }
        }
      },
      "dto.GcpStorage": {
        "description": "GcpStorage represents the configuration for GCP storage.",
        "type": "object",
        "required": [
          "bucket-name"
        ],
        "properties": {
          "bucket-name": {
            "description": "GCP storage bucket name.",
            "type": "string"
          },
          "endpoint": {
            "description": "Alternative url.\nIt is not recommended to use an alternate URL in a production environment.",
            "type": "string",
            "nullable": true
          },
          "key": {
            "description": "Key is the service account key in JSON format.\nThis is sensitive information. Can be a path in secret agent or an actual value.",
            "type": "string",
            "nullable": true
          },
          "key-file-path": {
            "description": "Path to the file containing the service account key in JSON format.",
            "type": "string",
            "nullable": true
          },
          "min-part-size": {
            "description": "The minimum size in bytes of individual GCP storage chunks.",
            "type": "integer",
            "default": 5242880,
            "minimum": 262144
          },
          "path": {
            "description": "The root path for the backup repository. If not specified, backups will be saved in the bucket's root.",
            "type": "string",
            "example": "backups",
            "nullable": true
          },
          "secret-agent": {
            "description": "Secret Agent configuration (optional).\nMutually exclusive with 'secret-agent-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.SecretAgent"
              }
            ]
          },
          "secret-agent-name": {
            "description": "Secret Agent configuration (optional). Link to one of preconfigured agents.\nMutually exclusive with 'secret-agent'.",
            "type": "string",
            "nullable": true
          },
          "storage-class": {
            "description": "StorageClass defines the storage class for data and metadata objects.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.GcpStorageClass"
              }
            ],
            "nullable": true
          }
        }
      },
      "dto.GcpStorageClass": {
        "description": "GcpStorageClass represents the configuration for GCP Storage Class.",
        "type": "object",
        "properties": {
          "data": {
            "description": "DataClass specifies the storage class for object data.",
            "type": "string",
            "enum": [
              "STANDARD",
              "NEARLINE",
              "COLDLINE",
              "ARCHIVE"
            ],
            "nullable": true
          }
        }
      },
      "dto.HTTPServerConfig": {
        "description": "HTTPServerConfig represents the service's HTTP server configuration.",
        "type": "object",
        "properties": {
          "address": {
            "description": "The address to listen on.",
            "type": "string",
            "default": "0.0.0.0",
            "example": "0.0.0.0"
          },
          "context-path": {
            "description": "ContextPath customizes path for the API endpoints.",
            "type": "string",
            "default": "/"
          },
          "port": {
            "description": "The port to listen on.",
            "type": "integer",
            "default": 8080,
            "example": 8080
          },
          "rate": {
            "description": "HTTP rate limiter configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RateLimiterConfig"
              }
            ]
          },
          "timeout": {
            "description": "Timeout for http server operations in milliseconds.",
            "type": "integer",
            "default": 5000
          }
        }
      },
      "dto.JobStatus": {
        "description": "JobStatus represents possible states of restore jobs.",
        "type": "string",
        "enum": [
          "Running",
          "Done",
          "Failed",
          "Cancelled"
        ],
        "x-enum-varnames": [
          "JobStatusRunning",
          "JobStatusDone",
          "JobStatusFailed",
          "JobStatusCancelled"
        ]
      },
      "dto.LocalStorage": {
        "description": "LocalStorage represents the configuration for local storage.",
        "type": "object",
        "required": [
          "path"
        ],
        "properties": {
          "path": {
            "description": "The root path for the backup repository.",
            "type": "string",
            "example": "backups"
          }
        }
      },
      "dto.LoggerConfig": {
        "description": "LoggerConfig represents the backup service logger configuration.",
        "type": "object",
        "properties": {
          "file-writer": {
            "description": "File writer logging configuration.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.FileLoggerConfig"
              }
            ]
          },
          "format": {
            "description": "Format is the logger format (PLAIN, JSON).",
            "type": "string",
            "default": "PLAIN",
            "enum": [
              "PLAIN",
              "JSON"
            ]
          },
          "level": {
            "description": "Level is the logger level.",
            "type": "string",
            "default": "DEBUG",
            "enum": [
              "TRACE",
              "DEBUG",
              "INFO",
              "WARN",
              "WARNING",
              "ERROR"
            ]
          },
          "stdout-writer": {
            "description": "Whether to enable logging to the standard output.",
            "type": "boolean",
            "default": true
          }
        }
      },
      "dto.Metrics": {
        "description": "Metrics represents the current job speed.",
        "type": "object",
        "properties": {
          "kilobytes-per-second": {
            "description": "Current speed as the amount of data processed by storage per second, in kilobytes.",
            "type": "integer"
          },
          "pipeline": {
            "description": "The number of records that have been read from the source, but not yet written to the destination.\nThis metric helps identify bottlenecks:\n- If Pipeline is zero or fluctuates near zero, it means the destination is consuming data\n  faster than the source can read.\n- If Pipeline grows large, it indicates that the source is producing data faster\n  than the destination can consume.",
            "type": "integer"
          },
          "records-per-second": {
            "description": "Current speed as the number of records processed by Aerospike per second.",
            "type": "integer"
          }
        }
      },
      "dto.RateLimiterConfig": {
        "description": "RateLimiterConfig is the HTTP server rate limiter configuration.",
        "type": "object",
        "properties": {
          "size": {
            "description": "Rate limiter token bucket size (bursts threshold).",
            "type": "integer",
            "default": 1024,
            "example": 1024
          },
          "tps": {
            "description": "Rate limiter tokens per second threshold.",
            "type": "integer",
            "default": 1024,
            "example": 1024
          },
          "white-list": {
            "description": "The list of ips to whitelist in rate limiting (optional).\nDefault: allow all.",
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        }
      },
      "dto.RestoreJobStatus": {
        "description": "RestoreJobStatus represents restore job status.",
        "type": "object",
        "properties": {
          "current-job": {
            "description": "Speed related metrics of the restore process.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RunningJob"
              }
            ]
          },
          "error": {
            "description": "Error message if any.",
            "type": "string"
          },
          "errors-in-doubt": {
            "description": "The number of errors in doubt while restoring.\n(IsInDoubt signifies that the write operation may have gone through on the server\nbut the client is not able to confirm that due an error.)\nNon zero value indicates that there are might be unexpected side effects during restore, like\n* Generation counter greater than expected for some records.\n* Fresher records counter greater than expected.",
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "existed-records": {
            "description": "The number of records dropped because they already existed in the database.",
            "type": "integer",
            "format": "int64",
            "example": 15
          },
          "expired-records": {
            "description": "The number of records dropped because they were expired.",
            "type": "integer",
            "format": "int64",
            "example": 2
          },
          "fresher-records": {
            "description": "The number of records dropped because the database already contained the records with a higher generation count.",
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "ignored-records": {
            "description": "The number of records ignored because of a record-level permanent error while restoring.",
            "type": "integer",
            "format": "int64",
            "example": 12
          },
          "index-count": {
            "description": "The number of successfully created secondary indexes.",
            "type": "integer",
            "format": "int64",
            "example": 3
          },
          "inserted-records": {
            "description": "The number of successfully restored records.",
            "type": "integer",
            "format": "int64",
            "example": 8
          },
          "read-records": {
            "description": "Number of records read from backup.\nWhen restore is finished, `read-records` =  `inserted-records` + `fresher-records` +\n`existed-records` + `ignored-records` + `skipped-records` + `expired-records`",
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "skipped-records": {
            "description": "The number of records dropped because they didn't contain any of the\nselected bins or didn't belong to any of the selected sets.",
            "type": "integer",
            "format": "int64",
            "example": 4
          },
          "status": {
            "description": "Status of the restore job.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.JobStatus"
              }
            ]
          },
          "total-bytes": {
            "description": "Total bytes read from backup.",
            "type": "integer",
            "format": "int64",
            "example": 2000
          },
          "udf-count": {
            "description": "The number of successfully stored UDF files.",
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        }
      },
      "dto.RestoreNamespace": {
        "description": "RestoreNamespace specifies an alternative namespace name for the restore operation.",
        "type": "object",
        "required": [
          "destination",
          "source"
        ],
        "properties": {
          "destination": {
            "description": "Name of the destination namespace to restore data into.",
            "type": "string",
            "example": "destination-ns"
          },
          "source": {
            "description": "Original namespace name.\nThis field is required as a safeguard to ensure intentional namespace remapping.",
            "type": "string",
            "example": "source-ns"
          }
        }
      },
      "dto.RestorePolicy": {
        "description": "RestorePolicy represents a policy for the restore operation.",
        "type": "object",
        "properties": {
          "bandwidth": {
            "description": "Throttles read operations from the backup file(s) to not exceed the given I/O bandwidth in MiB/s.\nDefault: no limit.",
            "type": "integer",
            "example": 50000,
            "nullable": true
          },
          "batch-size": {
            "description": "The max allowed number of records per an async batch write call.\nOnly applicable when using batch writes.",
            "type": "integer",
            "default": 128,
            "example": 32
          },
          "bin-list": {
            "description": "The bins to restore (optional, an empty list implies restoring all bins).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "bin1",
              "bin2"
            ],
            "nullable": true
          },
          "compression": {
            "description": "Compression details (algorithm). Default is no compression.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.CompressionPolicy"
              }
            ]
          },
          "disable-batch-writes": {
            "description": "Disables the use of batch writes when restoring records to the Aerospike cluster.\nBy default, the cluster is checked for batch write support.",
            "type": "boolean",
            "default": false
          },
          "encryption": {
            "description": "Encryption details (algorithm and key). Default is no encryption.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.EncryptionPolicy"
              }
            ]
          },
          "extra-ttl": {
            "description": "Amount of extra time-to-live to add to records that have expirable void-times.\nMust be set in seconds.",
            "type": "integer",
            "default": 0,
            "example": 86400
          },
          "max-async-batches": {
            "description": "The max number of outstanding async record batch write calls at a time.",
            "type": "integer",
            "default": 128,
            "example": 32
          },
          "namespace": {
            "description": "Namespace optionally specifies an alternative namespace name for the restore operation.\nBy default, the data is restored to the namespace from which it was taken.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RestoreNamespace"
              }
            ]
          },
          "no-generation": {
            "description": "Records from backups take precedence. This option disables the generation check.\nWith this option, records from the backup always overwrite records that already exist in\nthe namespace, regardless of generation numbers.",
            "type": "boolean",
            "default": false
          },
          "no-indexes": {
            "description": "Do not restore any secondary index definitions.",
            "type": "boolean",
            "default": false
          },
          "no-records": {
            "description": "Do not restore any record data (metadata or bin data).\nBy default, record data, secondary index definitions, and UDF modules will be restored.",
            "type": "boolean",
            "default": false
          },
          "no-udfs": {
            "description": "Do not restore any UDF modules.",
            "type": "boolean",
            "default": false
          },
          "parallel": {
            "description": "The number of concurrent record readers from backup files.\nThis value controls the level of parallelism used by the backup service when\nreading backup files.\nThe optimal value depends on hardware and network configuration.",
            "type": "integer",
            "default": 8,
            "example": 8
          },
          "replace": {
            "description": "Replace records. This controls how records from the backup overwrite existing records in\nthe namespace. By default, restoring a record from a backup only replaces the bins\ncontained in the backup; all other bins of an existing record remain untouched.",
            "type": "boolean",
            "default": false
          },
          "retry-policy": {
            "description": "Configuration of retries for each restore write operation.\nIf nil, the default policy is used (5 retries with a one-minute delay between attempts).",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RetryPolicy"
              }
            ]
          },
          "set-list": {
            "description": "The sets to restore (optional, an empty list implies restoring all sets).",
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "set1",
              "set2"
            ],
            "nullable": true
          },
          "socket-timeout": {
            "description": "Timeout (ms) for Aerospike commands to write records, create indexes and create UDFs.\nSocket timeout in milliseconds. Default is 10 minutes. If this value is 0, it is set to total-timeout.\nIf both are 0, there is no socket idle time limit.",
            "type": "integer",
            "default": 60000,
            "example": 1000
          },
          "total-timeout": {
            "description": "Total socket timeout in milliseconds. Default is 0, that is, no timeout.",
            "type": "integer",
            "default": 0,
            "example": 2000
          },
          "tps": {
            "description": "Throttles read operations from the backup file(s) to not exceed the given number of transactions per second.\nDefault: no limit.",
            "type": "integer",
            "example": 4000,
            "nullable": true
          },
          "unique": {
            "description": "Existing records take precedence. With this option, only records that do not exist in\nthe namespace are restored, regardless of generation numbers. If a record exists in\nthe namespace, the record from the backup is ignored.",
            "type": "boolean",
            "default": false
          }
        }
      },
      "dto.RestoreRequest": {
        "description": "RestoreRequest represents a restore operation request.",
        "type": "object",
        "required": [
          "backup-data-path"
        ],
        "properties": {
          "backup-data-path": {
            "description": "Path to the data from storage root.\nYou can obtain this value by:\n- Browsing the storage UI, or\n- Reading the `key` field in the response from GET `v1/backups/full/{routine}`",
            "type": "string"
          },
          "destination": {
            "description": "The details of the Aerospike destination cluster.\nMutually exclusive with 'destination-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.AerospikeCluster"
              }
            ]
          },
          "destination-name": {
            "description": "Link to one of preconfigured clusters.\nMutually exclusive with 'destination'.",
            "type": "string",
            "nullable": true
          },
          "policy": {
            "description": "Restore policy to use in the operation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RestorePolicy"
              }
            ]
          },
          "secret-agent": {
            "description": "Secret Agent configuration (optional).\nMutually exclusive with 'secret-agent-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.SecretAgent"
              }
            ]
          },
          "secret-agent-name": {
            "description": "Secret Agent configuration (optional). Link to one of preconfigured agents.\nMutually exclusive with 'secret-agent'.",
            "type": "string",
            "nullable": true
          },
          "source": {
            "description": "The details of the storage configuration.\nMutually exclusive with 'source-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.Storage"
              }
            ]
          },
          "source-name": {
            "description": "Link to one of preconfigured storages.\nMutually exclusive with 'source'.",
            "type": "string",
            "nullable": true
          }
        }
      },
      "dto.RestoreTimestampRequest": {
        "description": "RestoreTimestampRequest represents a restore by timestamp operation request.",
        "type": "object",
        "required": [
          "routine",
          "time"
        ],
        "properties": {
          "destination": {
            "description": "The details of the Aerospike destination cluster.\nMutually exclusive with 'destination-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.AerospikeCluster"
              }
            ]
          },
          "destination-name": {
            "description": "Link to one of preconfigured clusters.\nMutually exclusive with 'destination'.",
            "type": "string",
            "nullable": true
          },
          "disable-reordering": {
            "description": "Disable reverse order of incremental backups optimisation.",
            "type": "boolean",
            "default": false
          },
          "policy": {
            "description": "Restore policy to use in the operation.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RestorePolicy"
              }
            ]
          },
          "routine": {
            "description": "The backup routine name.",
            "type": "string",
            "example": "daily"
          },
          "secret-agent": {
            "description": "Secret Agent configuration (optional).\nMutually exclusive with 'secret-agent-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.SecretAgent"
              }
            ]
          },
          "secret-agent-name": {
            "description": "Secret Agent configuration (optional). Link to one of preconfigured agents.\nMutually exclusive with 'secret-agent'.",
            "type": "string",
            "nullable": true
          },
          "time": {
            "description": "Required epoch time (in millis) for recovery. The closest backup before the timestamp will be applied.",
            "type": "integer",
            "format": "int64",
            "minimum": 1000000000000,
            "example": 1739538000000
          }
        }
      },
      "dto.RetentionPolicy": {
        "description": "RetentionPolicy specifies how many full and incremental backups to keep.",
        "type": "object",
        "properties": {
          "full": {
            "description": "Number of full backups to store:\n- If nil, retain all full backups.\n- If N is specified, retain the last N full backups.\n- The minimum value is 1.",
            "type": "integer",
            "minimum": 1,
            "nullable": true
          },
          "incremental": {
            "description": "Number of full backups to store incremental backups for:\n- If nil, retain all incremental backups.\n- If N is specified, retain incremental backups for the last N full backups.\n- If set to 0, do not retain any incremental backups.\n- Must not exceed the value of FullBackups.",
            "type": "integer",
            "nullable": true
          }
        }
      },
      "dto.RetryPolicy": {
        "description": "RetryPolicy defines the configuration for retry attempts in case of failures.",
        "type": "object",
        "properties": {
          "base-timeout": {
            "description": "BaseTimeout is the initial delay between retry attempts, in milliseconds.",
            "type": "integer"
          },
          "max-retries": {
            "description": "MaxRetries is the maximum number of retry attempts that will be made.\nIf set to 0, no retries will be performed.",
            "type": "integer"
          },
          "multiplier": {
            "description": "Multiplier is used to increase the delay between subsequent retry attempts.\nThe actual delay is calculated as: BaseTimeout * (Multiplier ^ attemptNumber)",
            "type": "number"
          }
        }
      },
      "dto.RoutineState": {
        "description": "RoutineState represent the current state of backups (full and incremental).",
        "type": "object",
        "properties": {
          "full": {
            "description": "Full represents the state of a full backup. Nil if no full backup is running.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RunningJob"
              }
            ]
          },
          "incremental": {
            "description": "Incremental represents the state of an incremental backup. Nil if no incremental backup is running.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.RunningJob"
              }
            ]
          },
          "last-full": {
            "description": "LastFull: the time of the last successful full backup.\nA nil value indicates that there has never been a full backup.",
            "type": "string"
          },
          "last-incremental": {
            "description": "LastIncremental: the time of the last successful incremental backup.\nA nil value indicates that there has never been an incremental backup.",
            "type": "string"
          },
          "next-full": {
            "description": "NextFull: the time of the next scheduled full backup.",
            "type": "string"
          },
          "next-incremental": {
            "description": "NextIncremental: the time of the next scheduled incremental backup.",
            "type": "string"
          }
        }
      },
      "dto.RunningJob": {
        "description": "RunningJob tracks progress of currently running job.",
        "type": "object",
        "properties": {
          "done-records": {
            "description": "The number of records that have been successfully done.",
            "type": "integer",
            "example": 50
          },
          "estimated-end-time": {
            "description": "The estimated time when the backup operation will be completed.\nIt is calculated based on the current percentage done and duration.\nA nil value indicates that the estimation is not available yet.",
            "type": "string",
            "example": "2006-01-02T15:04:05Z07:00"
          },
          "finish-time": {
            "description": "The time when the operation finished.\nA nil value indicates that the operation is still running.",
            "type": "string",
            "example": "2006-01-02T15:04:05Z07:00"
          },
          "metrics": {
            "description": "Metrics provides real-time information about data flow performance.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.Metrics"
              }
            ]
          },
          "percentage-done": {
            "description": "The progress of the backup operation as a percentage.",
            "type": "integer",
            "example": 50
          },
          "start-time": {
            "description": "The time when the operation started.",
            "type": "string",
            "example": "2006-01-02T15:04:05Z07:00"
          },
          "total-records": {
            "description": "The total number of records to be processed.",
            "type": "integer",
            "example": 100
          }
        }
      },
      "dto.S3Storage": {
        "description": "S3Storage represents the configuration for S3 storage.",
        "type": "object",
        "required": [
          "bucket",
          "s3-region"
        ],
        "properties": {
          "access-key-id": {
            "description": "Access Key ID for authentication with S3 StaticCredentialsProvider.\nThis is sensitive information. Can be a path in secret agent or an actual value.",
            "type": "string",
            "nullable": true
          },
          "bucket": {
            "description": "The S3 bucket name.",
            "type": "string"
          },
          "max-async-connections": {
            "description": "The maximum number of simultaneous requests from S3.",
            "type": "integer",
            "example": 16,
            "nullable": true
          },
          "min-part-size": {
            "description": "The minimum size in bytes of individual S3 UploadParts.",
            "type": "integer",
            "default": 5242880,
            "minimum": 5242880,
            "nullable": true
          },
          "path": {
            "description": "The root path for the backup repository within the bucket.\nIf not specified, backups will be saved in the bucket's root.",
            "type": "string",
            "example": "backups",
            "nullable": true
          },
          "s3-endpoint-override": {
            "description": "An alternative endpoint for the S3 SDK to communicate (AWS S3 optional).",
            "type": "string",
            "example": "http://host.docker.internal:9000",
            "nullable": true
          },
          "s3-log-level": {
            "description": "The log level of the AWS S3 SDK (AWS S3 optional).",
            "type": "string",
            "default": "FATAL",
            "enum": [
              "OFF",
              "FATAL",
              "ERROR",
              "WARN",
              "INFO",
              "DEBUG",
              "TRACE"
            ]
          },
          "s3-profile": {
            "description": "The S3 profile name (AWS S3 optional).",
            "type": "string",
            "example": "default",
            "nullable": true
          },
          "s3-region": {
            "description": "The S3 region string.",
            "type": "string",
            "example": "eu-central-1"
          },
          "secret-access-key": {
            "description": "Secret Access Key for authentication with S3 StaticCredentialsProvider.\nThis is sensitive information. Can be a path in secret agent or an actual value.",
            "type": "string",
            "nullable": true
          },
          "secret-agent": {
            "description": "Secret Agent configuration (optional).\nMutually exclusive with 'secret-agent-name'.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.SecretAgent"
              }
            ]
          },
          "secret-agent-name": {
            "description": "Secret Agent configuration (optional). Link to one of preconfigured agents.\nMutually exclusive with 'secret-agent'.",
            "type": "string",
            "nullable": true
          },
          "storage-class": {
            "description": "StorageClass defines the storage class for data and metadata objects.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.S3StorageClass"
              }
            ]
          }
        }
      },
      "dto.S3StorageClass": {
        "description": "S3StorageClass represents the configuration for S3 Storage Class.",
        "type": "object",
        "properties": {
          "data": {
            "description": "DataClass specifies the storage class for object data.",
            "type": "string",
            "enum": [
              "STANDARD",
              "GLACIER",
              "STANDARD_IA",
              "ONEZONE_IA",
              "INTELLIGENT_TIERING",
              "DEEP_ARCHIVE",
              "OUTPOSTS",
              "GLACIER_IR",
              "SNOW",
              "EXPRESS_ONEZONE"
            ],
            "nullable": true
          },
          "metadata": {
            "description": "MetadataClass specifies the storage class for metadata.",
            "type": "string",
            "enum": [
              "STANDARD",
              "STANDARD_IA",
              "INTELLIGENT_TIERING",
              "EXPRESS_ONEZONE",
              "ONEZONE_IA",
              "OUTPOSTS"
            ],
            "nullable": true
          }
        }
      },
      "dto.SecretAgent": {
        "description": "SecretAgent represents the configuration of an Aerospike Secret Agent.",
        "type": "object",
        "required": [
          "address",
          "connection-type"
        ],
        "properties": {
          "address": {
            "description": "Address of the Secret Agent.",
            "type": "string",
            "example": "localhost"
          },
          "connection-type": {
            "description": "Connection type.",
            "type": "string",
            "enum": [
              "tcp",
              "unix"
            ],
            "example": "tcp"
          },
          "is-base64": {
            "description": "Flag that shows if secret agent responses are encrypted with base64.",
            "type": "boolean",
            "default": false
          },
          "port": {
            "description": "Port the Secret Agent is running on.",
            "type": "integer",
            "example": 8080,
            "nullable": true
          },
          "timeout": {
            "description": "Timeout in milliseconds.",
            "type": "integer",
            "default": 1000
          },
          "tls-ca-file": {
            "description": "The path to a trusted CA certificate file in PEM format.",
            "type": "string",
            "example": "/path/to/ca.pem",
            "nullable": true
          }
        }
      },
      "dto.SeedNode": {
        "description": "SeedNode represents details of a node in the Aerospike cluster.",
        "type": "object",
        "required": [
          "host-name",
          "port"
        ],
        "properties": {
          "host-name": {
            "description": "The host name of the node.",
            "type": "string",
            "example": "localhost"
          },
          "port": {
            "description": "The port of the node.",
            "type": "integer",
            "maximum": 65535,
            "minimum": 1,
            "example": 3000
          },
          "tls-name": {
            "description": "TLS certificate name used for secure connections (if enabled).",
            "type": "string",
            "example": "certName",
            "nullable": true
          }
        }
      },
      "dto.Storage": {
        "description": "Storage represents the configuration for a backup storage details.",
        "type": "object",
        "properties": {
          "azure-storage": {
            "description": "AzureStorage configuration, set if using Azure storage.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.AzureStorage"
              }
            ]
          },
          "gcp-storage": {
            "description": "GcpStorage configuration, set if using GCP storage.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.GcpStorage"
              }
            ]
          },
          "local-storage": {
            "description": "LocalStorage configuration, set if using local storage.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.LocalStorage"
              }
            ]
          },
          "s3-storage": {
            "description": "S3Storage configuration, set if using S3 storage.",
            "allOf": [
              {
                "$ref": "#/components/schemas/dto.S3Storage"
              }
            ]
          }
        }
      },
      "dto.TLS": {
        "description": "TLS represents the Aerospike cluster TLS configuration options.",
        "type": "object",
        "properties": {
          "ca-file": {
            "description": "Path to a trusted CA certificate file.",
            "type": "string",
            "example": "/path/to/cafile.pem",
            "nullable": true
          },
          "ca-path": {
            "description": "Path to a directory of trusted CA certificates.",
            "type": "string",
            "example": "/path/to/ca",
            "nullable": true
          },
          "cert-file": {
            "description": "Path to the chain file for mutual authentication (if Aerospike Cluster supports it).",
            "type": "string",
            "example": "/path/to/certfile.pem",
            "nullable": true
          },
          "cipher-suite": {
            "description": "TLS cipher selection criteria. The format is the same as OpenSSL's Cipher List Format.",
            "type": "string",
            "example": "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
            "nullable": true
          },
          "key-file": {
            "description": "Path to the key for mutual authentication (if Aerospike cluster supports it).",
            "type": "string",
            "example": "/path/to/keyfile.pem",
            "nullable": true
          },
          "key-file-password": {
            "description": "Password to load protected TLS-keyfile (env:VAR, file:PATH, PASSWORD).",
            "type": "string",
            "example": "file:/path/to/password",
            "nullable": true
          },
          "name": {
            "description": "The default TLS name used to authenticate each TLS socket connection.",
            "type": "string",
            "example": "tls-name",
            "nullable": true
          },
          "protocols": {
            "description": "TLS protocol selection criteria. This format is the same as Apache's SSL Protocol.",
            "type": "string",
            "default": "TLSv1.2"
          }
        }
      }
    }
  }
}
